impl Solution {
    pub fn make_good(s: String) -> String {
        let bytes: Vec<u8> = s.bytes().collect();
        let mut ans = vec![];

        let mut i = 0;
        let len = s.len();

        while i < len - 1 {
            match (bytes.get(i), bytes.get(i+1)) {
                (Some(j), Some(k)) => {
                    if (j - k) == 32 || (k - j) == 32 {
                        //remove these two
                        i += 2;
                    } else {
                        //not the same, so do nothing
                        ans.push(*j);
                        i += 1;
                    }
                },
                (Some(j), None) => {
                    ans.push(*j);
                    i += 1;
                },
                _ => ()
            }
        }

        String::from_utf8(ans).unwrap()
    }
}

#[cfg(test)]
mod tests {

    #[test]
    fn it_works() {

        let result = 2 + 2;
        assert_eq!(result, 4);
    }
}

struct Solution;
